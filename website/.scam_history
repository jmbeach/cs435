_HiStOrY_V2_
(define\040(f\040a)\040(cond\040((a\040>\0401)\040a)))
(f\0401)
(define\040(f\040a)\040(cond\040((>\040a\0401)\040a)))
(f\0401)
(f\0400)
(f\0402)
(length\040(get\040(quote\040parameters)\040+))
(define\040(twoP\040x\040y)\040(+\040x\040y))
(length\040(get\040(quote\040parameters)\040twoP))
(define\040(fiveP\040q\040r\040s\040t\040u)\040(+\040q\040r\040s\040t\040u))
(length\040(get\040(quote\040parameters)\040fiveP))
(define\040(nested\040@)\040(define\040(x\040@)\040(length\040@))\040(x\0401\0402)\040(length\040@))
(nested\0401\0402\0403\0404)
(define\040(nested\040@)\040(define\040(x\040@)\040(length\040@))\040(print\040(x\0401\0402))\040(print\040(length\040@)))
(nested\0401\0402\0403\0404)
(define\040(list-comb\040a\040b)\040(list\040a\040b))
(list-comb\040(quote\040(1\0402))\040(quote\040(2\0403)))
(define\040(curry\040f\040@)\040(define\040paramLength\040(length\040(get\040(quote\040parameters)\040f)))\040(define\040initialParams\040@)\040(define\040(percolate\040@)\040(define\040percPerams\040@)\040(curry\040f\040(list-comb\040initialParams\040percPerams)))\040(cond\040((<\040(length\040initialParams)\040paramLength)\040percolate)\040(else)))
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(fiveP\0401\0402\0403\0404\0405)
(define\040(curry\040f\040@)\040(define\040paramLength\040(length\040(get\040(quote\040parameters)\040f)))\040(define\040initialParams\040@)\040(define\040(percolate\040@)\040(define\040percPerams\040@)\040(curry\040f\040(list-comb\040initialParams\040percPerams)))\040(cond\040((<\040(length\040initialParams)\040paramLength)\040(println\040(length\040initialParams))\040percolate)\040(else)))
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(define\040(list-comb\040a\040b)\040(cond\040((null?\040a)\040b)\040((null?\040b)\040a)\040(else\040(cons\040(car\040a)\040(cons\040(car\040b)\040(list-comb\040(cdr\040a)\040(cdr\040b)))))))
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(define\040(curry\040f\040@)\040(define\040paramLength\040(length\040(get\040(quote\040parameters)\040f)))\040(define\040initialParams\040@)\040(define\040(percolate\040@)\040(println\040"percolatin")\040(define\040percPerams\040@)\040(curry\040f\040(list-comb\040initialParams\040percPerams)))\040(cond\040((<\040(length\040initialParams)\040paramLength)\040(println\040(length\040initialParams))\040percolate)\040(else)))
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(define\040(curry\040f\040@)\040(define\040paramLength\040(length\040(get\040(quote\040parameters)\040f)))\040(define\040initialParams\040@)\040(define\040(percolate\040@)\040(println\040"percolatin")\040(define\040percPerams\040@)\040(println\040"initialParams"\040initialParams)\040(curry\040f\040(list-comb\040initialParams\040percPerams)))\040(cond\040((<\040(length\040initialParams)\040paramLength)\040(println\040(length\040initialParams))\040percolate)\040(else)))
(((curry\040fiveP\0401\0402)\0403\0404)\0405)
(define\040(list-comb\040a\040b)\040(cond\040((null?\040a)\040b)\040((null?\040b)\040a)\040(else\040(cons\040(car\040a)\040(list-comb\040b\040(cdr\040a))))))
